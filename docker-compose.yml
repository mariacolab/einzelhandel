services:
  postgres:
    image: postgres:latest
    container_name: postgres_container
    build:
      context: .
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: microservices_db
      GITHUB_CREDENTIALS_FILE: /run/secrets/github_credentials
    ports:
      - "5432:5432"
    volumes:
      - db_data:/var/lib/postgresql/data
      - ./backend/database-management/init.sql:/docker-entrypoint-initdb.d/init.sql
      - ./update_pg_hba.sh:/docker-entrypoint-initdb.d/update_pg_hba.sh
    secrets:
      - github_credentials
    #env_file:
    #  - ./secrets/github_credentials.txt

  database-management:
    build:
      context: ./backend/database-management
      target: production
    container_name: database-management-service
    environment:
      FLASK_APP: app
      DATABASE_URL: postgres://postgres:${POSTGRES_PASSWORD}@postgres:5432/microservices_db
      GITHUB_CREDENTIALS_FILE: /run/secrets/github_credentials
      PYTHONPATH: /app
    depends_on:
      - postgres
    ports:
      - "5001:5000"
    secrets:
      - github_credentials
    volumes:
      - ./backend/database-management:/app
      - ./secrets:/app/secrets
    #env_file:
    #  - ./secrets/github_credentials.txt

  admin-service:
    build:
      context: ./backend/administrative-service
      target: production
    container_name: admin-service
    environment:
      FLASK_APP: app
      GITHUB_CREDENTIALS_FILE: /run/secrets/github_credentials
      PYTHONPATH: /app
    depends_on:
      - database-management
    ports:
      - "5002:5000"
    secrets:
      - github_credentials

  user-management:
    build:
      context: ./backend/user_management
    container_name: user_service
    environment:
      FLASK_APP: app
      GITHUB_CREDENTIALS_FILE: /run/secrets/github_credentials
      PYTHONPATH: /app
    ports:
      - "5003:5000"
    depends_on:
      - database-management
    secrets:
      - github_credentials
    volumes:
      - ./backend/user_management:/app
      - ./secrets:/app/secrets

  qr-service:
    build:
      context: ./backend/qr-code-generator
    container_name: qr_service
    environment:
      FLASK_APP: backend/qr-code-generator/generate_qr.py
      PYTHONPATH: /app
    ports:
      - "5004:5000"
    depends_on:
      - postgres

  eventing-service:
    build:
      context: ./backend/eventing
    container_name: eventing_service
    environment:
      FLASK_APP: backend/eventing/producer.py
      PYTHONPATH: /app
    ports:
      - "5005:5000"
    depends_on:
      - postgres

  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASSWORD}

    producer:
      build:
        context: .
        dockerfile: Dockerfile
      container_name: producer
      environment:
        - RABBITMQ_URL=amqp://rabbitmq:5672
      depends_on:
        - rabbitmq
      ports:
        - "8000:8000"
      command: python producer.py

    consumer:
      build:
        context: .
        dockerfile: Dockerfile
      container_name: consumer
      environment:
        - RABBITMQ_URL=amqp://rabbitmq:5672
      depends_on:
        - rabbitmq
      command: python consumer.py


  nginx:
    image: nginx:latest
    container_name: nginx-proxy
    ports:
      - "80:80"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - database-management
      - admin-service
      - qr-service
      - user-management

volumes:
  nginx_conf:
  db_data:

secrets:
  github_credentials:
    file: ./secrets/github_credentials.txt
