asyncapi: 2.6.0
info:
  title: Object Recognition Events
  version: 1.0.0
  description: AsyncAPI-Spezifikation für die Events im Zusammenhang mit dem Bild upload, der Objekterkennung und QR-Code-Generierung.

servers:
  rabbitmq:
    url: amqp://broker.example.com
    protocol: amqp
    description: RabbitMQ-Server für Event nachrichten

components:
  securitySchemes:
    OAuth2:
      type: oauth2
      description: Sicherung für die Kommunikation.
      flows:
        authorizationCode:
          authorizationUrl: https://auth.example.com/authorize
          tokenUrl: https://auth.example.com/token
          scopes:
            publish: Berechtigung, Events zu senden.
            subscribe: Berechtigung, Events zu empfangen.

  messages:
    ImageUploaded:
      name: ImageUploaded
      title: Bild hochgeladen
      description: Enthält das hochgeladenes Bild und Daten zum Bild.
      contentType: multipart/form-data
      payload:
        type: object
        properties:
          type:
            type: string
            default: ProcessFiles
          model:
            type: string
            description: small oder big als Wert
          filename:
            type: string
            format: binary
            description: Das hochgeladene Bild.
    ImageValidated:
      name: ImageValidated
      title: Bild validiert
      description: Validierung des Bilds abgeschlossen.
      contentType: multipart/form-data
      payload:
        type: object
        properties:
          type:
            type: string
            default: ValidatedFiles
          model:
            type: string
            description: small oder big als Wert
          file:
            type: string
            format: binary
            description: Das hochgeladene Bild.

    ClassificationCompleted:
      name: ClassificationCompleted
      title: Klassifikation abgeschlossen
      description: Ergebnisse der Bildklassifikation.
      contentType: multipart/form-data
      payload:
        type: object
        properties:
          type:
            type: string
            default: ClassFiles
          result:
            type: string
            description: Rückgabe der Klassifizierung

    QRCodeGenerated:
      name: QRCodeGenerated
      title: QR-Code generiert
      description: Details zum generierten QR-Code.
      contentType: multipart/form-data
      payload:
        type: object
        properties:
          type:
            type: string
            default: ProcessQrcode
          image_blob:
            type: string
            description: Base64 String des QR-Codes

    ClassificationReported:
      name: ClassificationReported
      title: mögliche Fehlklassifizierung gemeldet
      description: Meldung einer möglichen Fehlklassifizierung durch das Frontend.
      contentType: multipart/form-data
      payload:
        type: object
        properties:
          type:
            type: string
            default: ProcessQrcode
          classification:
            type: string
            description: Rückgabewert der KI
          filename:
            type: string
            format: binary
            description: Das klassifizierte Bild.

    CorrectedClassification:
      name: CorrectedClassification
      title: Korrigierte Klassifikation
      description: bestätigung der Klassifikation durch den Benutzer.
      contentType: multipart/form-data
      payload:
        type: object
        properties:
          type:
            type: string
            default: ProcessQrcode
          is_classification_correct:
            type: boolean
            description: Rückgabe des Frontends
          classification:
            type: string
            description: Rückgabewert der KI
          filename:
            type: array
            description: Der Dateiname mit Dateiendung des Bilds.
          path:
            type: array
            description: Der Ablagepfad des Bilds.

    TrainingsDataUploaded:
      name: TrainingsDataUploaded
      title: Trainingsdaten hochgeladen
      description: Enthält hochgeladene Trainingsbilder für die Validierung und Labeling.
      contentType: application/json
      payload:
        type: object
        properties:
          type:
            type: string
            default: Trainingdata
          ki:
            type: string
            description: Gibt an, ob Tensorflow oder Yolo verwendet wird.
          files:
            type: array
            items:
              type: string
            description: Liste der hochgeladenen Dateipfade.

      LabeledTrainingData:
        name: LabeledTrainingData
        title: Gelabelte Trainingsdaten
        description: Enthält die vom Backend validierten Trainingsdaten.
        contentType: application/json
        payload:
          type: object
          properties:
            type:
              type: string
              default: LabeledTrainingdata
            ki:
              type: string
              description: Gibt an, ob Tensorflow oder Yolo verwendet wird.
            labels:
              type: array
              items:
                type: string
              description: Labels für die Trainingsdaten.
            files:
              type: array
              items:
                type: string
              description: Liste der Dateinamen.

      TrainTF:
        name: TrainTF
        title: TensorFlow Training starten
        description: Startet das Nachtraining für TensorFlow.
        contentType: application/json
        payload:
          type: object
          properties:
            type:
              type: string
              default: TrainTF

      TrainYOLO:
        name: TrainYOLO
        title: YOLO Training starten
        description: Startet das Nachtraining für YOLO.
        contentType: application/json
        payload:
          type: object
          properties:
            type:
              type: string
              default: TrainYOLO

      QRCodeScan:
        name: QRCodeScan
        title: QR-Code-Scan
        description: Enthält die Daten eines gescannten QR-Codes.
        contentType: application/json
        payload:
          type: object
          properties:
            type:
              type: string
              default: ReadQrCode
            qrdata:
              type: string
              description: Enthält die aus dem QR-Code gelesenen Daten.

      $ref:
      QRCodeSendResult:
        name: QRCodeSendResult
        title: QR-Code-Scan-Ergebnis senden
        description: Sendet die extrahierten QR-Code-Daten.
        contentType: application/json
        payload:
          type: object
          properties:
            type:
              type: string
              default: sendQrCodeResult
            name:
              type: string
            description:
              type: string
            shelf:
              type: string
            price_piece:
              type: string
            price_kg:
              type: string

channels:
  image_uploaded:
    description: Event, das gesendet wird, wenn ein Bild vom Frontend hochgeladen wurde und vom Backend empfangen werden soll.
    subscribe:
      summary: Backend empfängt das Bild vom Event.
      operationId: onImageUploaded
      security:
        - OAuth2: [publish]
      message:
        $ref: '#/components/messages/ImageUploaded'

  image_validated:
    description: Event, das gesendet wird, nachdem das Backend ein Bild validiert hat und die KI benachrichtigt werden soll.
    publish:
      summary: Backend sendet das Bild vom Event an die KI.
      operationId: onImageValidated
      security:
        - OAuth2: [publish]
      message:
        $ref: '#/components/messages/ImageValidated'

  classification_completed:
    description: Event, das von der KI gesendet wird, wenn die Klassifikation abgeschlossen ist, und vom Backend empfangen werden soll.
    subscribe:
      summary: Backend empfängt das Ergbnis der Klassifikation.
      operationId: onClassificationCompleted
      security:
        - OAuth2: [publish]
      message:
        $ref: '#/components/messages/ClassificationCompleted'

  qrcode_generated:
    description: Event, das vom Backend gesendet wird, wenn ein QR-Code generiert wurde, und vom Frontend empfangen werden soll.
    publish:
      summary: Backend sendet den QR-Code an das Frontend.
      operationId: onQRCodeGenerated
      security:
        - OAuth2: [publish]
      message:
        $ref: '#/components/messages/QRCodeGenerated'

  misclassification_reported:
    description: Event, das von der KI gesendet wird, wenn eine Fehlklassifikation erkannt wird und vom Frontend empfangen werden soll.
    publish:
      summary: Frontend sendet Fehlklassifizierung zur Verarbeitung an das Backend.
      operationId: onClassificationReported
      security:
        - OAuth2: [publish]
      message:
        $ref: '#/components/messages/ClassificationReported'

  corrected_classification:
    description: Event das vom Frontend gesendet wird, wenn eine korrigierte Klassifikation vom Mitarbeiter oder Admin bestätigt wurde.
    publish:
      summary: Frontend sendet die korrigierte Klassifikation zurück an die KI.
      operationId: onCorrectedClassification
      security:
        - OAuth2: [publish]
      message:
        $ref: '#/components/messages/CorrectedClassification'
